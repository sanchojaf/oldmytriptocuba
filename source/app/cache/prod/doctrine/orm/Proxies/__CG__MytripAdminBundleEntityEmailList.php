<?php

namespace Proxies\__CG__\Mytrip\AdminBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class EmailList extends \Mytrip\AdminBundle\Entity\EmailList implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'emailListId', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'title', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'label', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'fromname', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'fromemail', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'tomail', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'ccmail');
        }

        return array('__isInitialized__', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'emailListId', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'title', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'label', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'fromname', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'fromemail', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'tomail', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\EmailList' . "\0" . 'ccmail');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (EmailList $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getEmailListId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getEmailListId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailListId', array());

        return parent::getEmailListId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', array($label));

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', array());

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setFromname($fromname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromname', array($fromname));

        return parent::setFromname($fromname);
    }

    /**
     * {@inheritDoc}
     */
    public function getFromname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromname', array());

        return parent::getFromname();
    }

    /**
     * {@inheritDoc}
     */
    public function setFromemail($fromemail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromemail', array($fromemail));

        return parent::setFromemail($fromemail);
    }

    /**
     * {@inheritDoc}
     */
    public function getFromemail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromemail', array());

        return parent::getFromemail();
    }

    /**
     * {@inheritDoc}
     */
    public function setTomail($tomail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTomail', array($tomail));

        return parent::setTomail($tomail);
    }

    /**
     * {@inheritDoc}
     */
    public function getTomail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTomail', array());

        return parent::getTomail();
    }

    /**
     * {@inheritDoc}
     */
    public function setCcmail($ccmail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCcmail', array($ccmail));

        return parent::setCcmail($ccmail);
    }

    /**
     * {@inheritDoc}
     */
    public function getCcmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCcmail', array());

        return parent::getCcmail();
    }

}
