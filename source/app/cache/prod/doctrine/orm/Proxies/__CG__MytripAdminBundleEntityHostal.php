<?php

namespace Proxies\__CG__\Mytrip\AdminBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Hostal extends \Mytrip\AdminBundle\Entity\Hostal implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'hostalId', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'name', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'url', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'phone', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'mobile', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'video', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'latitude', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'longitude', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'createdDate', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'modifyDate', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'status', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'destination', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'tripadvisor');
        }

        return array('__isInitialized__', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'hostalId', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'name', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'url', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'phone', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'mobile', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'video', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'latitude', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'longitude', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'createdDate', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'modifyDate', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'status', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'destination', '' . "\0" . 'Mytrip\\AdminBundle\\Entity\\Hostal' . "\0" . 'tripadvisor');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Hostal $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getHostalId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getHostalId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHostalId', array());

        return parent::getHostalId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', array($url));

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhone($phone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhone', array($phone));

        return parent::setPhone($phone);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhone', array());

        return parent::getPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setMobile($mobile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMobile', array($mobile));

        return parent::setMobile($mobile);
    }

    /**
     * {@inheritDoc}
     */
    public function getMobile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMobile', array());

        return parent::getMobile();
    }

    /**
     * {@inheritDoc}
     */
    public function setVideo($video)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVideo', array($video));

        return parent::setVideo($video);
    }

    /**
     * {@inheritDoc}
     */
    public function getVideo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVideo', array());

        return parent::getVideo();
    }

    /**
     * {@inheritDoc}
     */
    public function setLatitude($latitude)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLatitude', array($latitude));

        return parent::setLatitude($latitude);
    }

    /**
     * {@inheritDoc}
     */
    public function getLatitude()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLatitude', array());

        return parent::getLatitude();
    }

    /**
     * {@inheritDoc}
     */
    public function setLongitude($longitude)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLongitude', array($longitude));

        return parent::setLongitude($longitude);
    }

    /**
     * {@inheritDoc}
     */
    public function getLongitude()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLongitude', array());

        return parent::getLongitude();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedDate($createdDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDate', array($createdDate));

        return parent::setCreatedDate($createdDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedDate', array());

        return parent::getCreatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifyDate($modifyDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifyDate', array($modifyDate));

        return parent::setModifyDate($modifyDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifyDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifyDate', array());

        return parent::getModifyDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setDestination(\Mytrip\AdminBundle\Entity\Destination $destination = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDestination', array($destination));

        return parent::setDestination($destination);
    }

    /**
     * {@inheritDoc}
     */
    public function getDestination()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDestination', array());

        return parent::getDestination();
    }

    /**
     * {@inheritDoc}
     */
    public function setTripadvisor($tripadvisor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTripadvisor', array($tripadvisor));

        return parent::setTripadvisor($tripadvisor);
    }

    /**
     * {@inheritDoc}
     */
    public function getTripadvisor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTripadvisor', array());

        return parent::getTripadvisor();
    }

}
